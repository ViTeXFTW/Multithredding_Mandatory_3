-----------------------------------
Mandatory Assignment 3 - Group 13.
Sudoku solver
-----------------------------------

For this assignment we have decided to create a sudoku solver.
In sudokus you normally need to look for one number at a time. And then
go through every number from 1-9. For this assignment we thougth about how much
faster it would be if you were able to look for every number at the same time. 

For this we created a solver which creates a thread for each number, and all these threads
share the same board and work on it at the same time. Every individual thread is just running a
brute force method where we check every available positions if that threads number can be
placed in the box. Every time a thread has complete a full look through of the board it updates
it board to see if any other thread has found a number.

Potential issues:


Race condition:
For this program a race condition could be when a thread is done checking its boxes
and tries to update the board when another thread is trying to write in a new number.
Here the thread then woudln't get the newest version of the board.

Race condition solution:
As a solution we have decided to use mutual exclution this is where we lock every other thread out
of the shared memory when another thread is reading or writing to it. Every time a thread is writing to
the shared sudoku board it locks that part of memory from other threads. The same goes for when a thread
wants to read from the board. To make sure nothing changes while the thread is copying the board it locks
that part of memory from the other threads. 

Deadlocks and starvation:
For this program a deadlock could happen when either the program is given a sudoku that isn't possible. 
Here all the threads would end up in a deadlock where they all need another thread to give a new number
but there isn't any thread capable of this.
Another deadlock could be that the sudoku is possible but not with the implementation we have made. Here 
it would end up in the same senario where the threads are waiting for the others to find a new number. 

Starvation could happen if one thread always have access to the shared memory and therefore locks
all the other threads out. Then all other threads would end up in a wait state.

Deadlock and starvation solutions:

To prevent a deadlock when our program cannot solve the given sudoku, or the sudoku is impossible to solve,
we have implemented a checker. Since we have a thread for each number 1-9, 
we can check if none of the threads are able to place a number, and this will tell us if the program is stuck.
We should not have any starvation problems, since the same thread will not always be using the memory. 
The threads have no priority and therefore the same priority, this means that the thread with the lowest id will be prioritised.
Since they have same priority and non of the threads will be accessing the memory for long periods of time,
there will be no starvation.

















